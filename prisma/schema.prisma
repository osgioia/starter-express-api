generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Torrent {
  id           Int       @id @default(autoincrement())
  name         String
  description  String?   @db.VarChar(255)
  infoHash     String    @unique
  completed    Int       @default(0)
  category     Category? @relation(fields: [categoryId], references: [id])
  uploadedBy   User?     @relation(fields: [uploadedById], references: [id]) // Hacer la relaci√≥n opcional
  uploadedById Int?
  downloads    Int       @default(0)
  anonymous    Boolean   @default(false)
  freeleech    Boolean   @default(false)
  size         Int       @default(0)
  tags         Tag[]
  categoryId   Int?
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  torrents Torrent[]
}

model Tag {
  id       Int       @id @default(autoincrement())
  name     String
  torrents Torrent[]
}

model Bookmarks {
  id     Int      @id @default(autoincrement())
  user   User     @relation(fields: [userId], references: [id])
  userId Int
  time   DateTime
  sort   Int      @default(0)

  @@unique([userId, id], name: "unique_user_bookmark")
}

model User {
  id               Int          @id @default(autoincrement())
  username         String
  email            String
  password         String
  uid              String
  torrents         Torrent[]
  bookmarks        Bookmarks[]
  created          DateTime
  banned           Boolean
  role             String
  invitedBy        Invite?      @relation(fields: [inviteId], references: [id])
  invitedById      Int?
  remainingInvites Int
  emailVerified    Boolean
  inviteId         Int?
  Progress         Progress[]
  InviteTree       InviteTree[]

  @@unique([invitedById], name: "unique_invitedBy_user")
}

model Progress {
  infoHash String
  user     User   @relation(fields: [userId], references: [id])
  userId   Int
  uploaded Int
  download Int
  left     Int

  @@id([infoHash, userId])
}

model GeoIPCountry {
  startIP Int
  endIP   Int
  code    String @db.VarChar(2)

  @@id([startIP, endIP])
}

model InviteTree {
  userID    Int  @id
  inviter   User @relation(fields: [inviterId], references: [id])
  inviterId Int

  @@index([inviterId], name: "InviterIdIndex")
  @@index([userID], name: "UserIDIndex")
}

model Invite {
  id        Int      @id @default(autoincrement())
  inviter   User[]
  inviterId Int
  inviteKey String   @unique
  email     String
  expires   DateTime
  reason    String

  @@index([expires], name: "ExpiresIndex")
  @@index([inviterId], name: "InviterIdInviteIndex")
}

model IPBan {
  id     Int     @id @default(autoincrement())
  fromIP Int
  toIP   Int
  reason String? @db.VarChar(255)

  @@unique([fromIP, toIP], name: "FromIP_ToIP")
  @@index([toIP], name: "ToIPIndex")
}
